{
    "format_version": "1.10.0",
    "minecraft:client_entity": {
        "description": {
            "identifier": "minecraft:creaking",
            "materials": {
                "default": "creaking",
                "eyes": "creaking_eyes",
                "health_bar": "entity_emissive_alpha"
            },
            "geometry": {
                "default": "geometry.creaking",
                "health_bar": "geometry.health_bar"
            },
            "textures": {
                "default": "textures/entity/creaking/creaking",
                "eyes": "textures/entity/creaking/creaking_eyes",
                "heart": "textures/health_bar/heart",
                "bar50": "textures/health_bar/bar/50",
                "bar49": "textures/health_bar/bar/49",
                "bar48": "textures/health_bar/bar/48",
                "bar47": "textures/health_bar/bar/47",
                "bar46": "textures/health_bar/bar/46",
                "bar45": "textures/health_bar/bar/45",
                "bar44": "textures/health_bar/bar/44",
                "bar43": "textures/health_bar/bar/43",
                "bar42": "textures/health_bar/bar/42",
                "bar41": "textures/health_bar/bar/41",
                "bar40": "textures/health_bar/bar/40",
                "bar39": "textures/health_bar/bar/39",
                "bar38": "textures/health_bar/bar/38",
                "bar37": "textures/health_bar/bar/37",
                "bar36": "textures/health_bar/bar/36",
                "bar35": "textures/health_bar/bar/35",
                "bar34": "textures/health_bar/bar/34",
                "bar33": "textures/health_bar/bar/33",
                "bar32": "textures/health_bar/bar/32",
                "bar31": "textures/health_bar/bar/31",
                "bar30": "textures/health_bar/bar/30",
                "bar29": "textures/health_bar/bar/29",
                "bar28": "textures/health_bar/bar/28",
                "bar27": "textures/health_bar/bar/27",
                "bar26": "textures/health_bar/bar/26",
                "bar25": "textures/health_bar/bar/25",
                "bar24": "textures/health_bar/bar/24",
                "bar23": "textures/health_bar/bar/23",
                "bar22": "textures/health_bar/bar/22",
                "bar21": "textures/health_bar/bar/21",
                "bar20": "textures/health_bar/bar/20",
                "bar19": "textures/health_bar/bar/19",
                "bar18": "textures/health_bar/bar/18",
                "bar17": "textures/health_bar/bar/17",
                "bar16": "textures/health_bar/bar/16",
                "bar15": "textures/health_bar/bar/15",
                "bar14": "textures/health_bar/bar/14",
                "bar13": "textures/health_bar/bar/13",
                "bar12": "textures/health_bar/bar/12",
                "bar11": "textures/health_bar/bar/11",
                "bar10": "textures/health_bar/bar/10",
                "bar09": "textures/health_bar/bar/09",
                "bar08": "textures/health_bar/bar/08",
                "bar07": "textures/health_bar/bar/07",
                "bar06": "textures/health_bar/bar/06",
                "bar05": "textures/health_bar/bar/05",
                "bar04": "textures/health_bar/bar/04",
                "bar03": "textures/health_bar/bar/03",
                "bar02": "textures/health_bar/bar/02",
                "bar01": "textures/health_bar/bar/01",
                "bar00": "textures/health_bar/bar/00",
                "font9": "textures/health_bar/font/9",
                "font8": "textures/health_bar/font/8",
                "font7": "textures/health_bar/font/7",
                "font6": "textures/health_bar/font/6",
                "font5": "textures/health_bar/font/5",
                "font4": "textures/health_bar/font/4",
                "font3": "textures/health_bar/font/3",
                "font2": "textures/health_bar/font/2",
                "font1": "textures/health_bar/font/1",
                "font0": "textures/health_bar/font/0"
            },
            "render_controllers": [
                "controller.render.creaking",
                "controller.render.creaking_eyes",
                "controller.render.health_bar.bar",
                "controller.render.health_bar.heart",
                "controller.render.health_bar.digit1",
                "controller.render.health_bar.digit2",
                "controller.render.health_bar.digit3"
            ],
            "scripts": {
                "pre_animation": [
                    "variable.state = query.property('minecraft:creaking_state');",
                    "variable.is_immobile = variable.state == 'hostile_observed';",
                    "variable.is_immobile_timer = !variable.is_immobile ? 0.0 : ((variable.is_immobile_timer ?? 0.0) + query.delta_time);",
                    "variable.y_head_rotation = query.target_y_rotation;",
                    "variable.walking = variable.is_immobile_timer < 0.75 && query.modified_move_speed > 0.01;",
                    "variable.attacking = variable.attack_time > 0.0;",
                    "variable.swaying = query.property('minecraft:creaking_swaying_ticks') > 0;",
                    "variable.twitching = variable.state == 'twitching';",
                    "variable.twitching_timer = !variable.twitching ? 0.0 : ((variable.twitching_timer ?? 0.0) + query.delta_time);",
                    "variable.emissive_time_min = variable.twitching_timer / 4.0;",
                    "variable.emissive_time_max = variable.emissive_time_min * 2.0f;",
                    "variable.time_to_emissive_eyes_switch = (!variable.twitching || (variable.has_switched_eyes_emissiveness_from_twitching ?? false)) ? ((variable.had_emissive_eyes_from_twitching ?? true) ? Math.Random(0.1, 0.4) : Math.Random(variable.emissive_time_min, variable.emissive_time_max)) : (variable.time_to_emissive_eyes_switch - query.delta_time);",
                    "variable.had_emissive_eyes_from_twitching = variable.has_emissive_eyes_from_twitching ?? false;",
                    "variable.has_emissive_eyes_from_twitching = variable.time_to_emissive_eyes_switch < 0.0 ? !variable.had_emissive_eyes_from_twitching : variable.had_emissive_eyes_from_twitching;",
                    "variable.has_switched_eyes_emissiveness_from_twitching = variable.has_emissive_eyes_from_twitching != variable.had_emissive_eyes_from_twitching;",
                    "variable.has_emissive_eyes = variable.has_emissive_eyes_from_twitching || variable.state == 'hostile_observed' || variable.state == 'hostile_unobserved';",
                    "v.health = q.health;",
                    "v.max_health = q.max_health;",
                    "v.health_bar_position = 45;",
                    "v.health_bar_scale = q.model_scale;"
                ],
                "animate": [
                    "look_at_target_controller",
                    "walk_controller",
                    "attack_controller",
                    "sway_controller",
                    "twitch_controller",
                    "health_bar"
                ],
                "should_update_effects_offscreen": "1.0"
            },
            "animations": {
                "look_at_target": "animation.creaking.look_at_target",
                "look_at_target_controller": "controller.animation.creaking.look_at_target",
                "walk": "animation.creaking.walk",
                "walk_controller": "controller.animation.creaking.walk",
                "attack": "animation.creaking.attack",
                "attack_controller": "controller.animation.creaking.attack",
                "sway": "animation.creaking.sway",
                "sway_controller": "controller.animation.creaking.sway",
                "twitch": "animation.creaking.twitch",
                "twitch_controller": "controller.animation.creaking.twitch",
                "health_bar": "animation.health_bar"
            },
            "sound_effects": {
                "sway": "mob.creaking.sway",
                "twitch": "mob.creaking.twitch"
            },
            "spawn_egg": {
                "texture": "spawn_egg_creaking"
            }
        }
    }
}